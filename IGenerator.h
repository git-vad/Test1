#ifndef IGENERATOR_H
#define IGENERATOR_H
/**
 * @file IGenerator.h
 * @author vladimir_ad@mail.ru
 * @brief файл содержит объявление интерфейса Генератора
 * @version 0.1
 * @date 2025-03-05
 */

#include <cstdint>
#include <span>

namespace generator
{

struct Packet {
    uint8_t n;
    uint16_t freq; // 100Hz - 20'000 Hz
};

enum class RESULT {OK, FAIL};
enum class STATUS {
    STOPPED,        //!< не активен;
    START_PENDING,  //!< запускается (еще не активен);
    RUNNING,        //!< активен;
    STOP_PENDING,   //!< останавливается (уже не активен);
    NO_SUPPORTED    //!< Состояние не поддерживается.
};

/**
 *   Интерфейс IGenerator используется для генерации последовательностей импульсов.
 * Когда генератор не генерирует импульсы, он находится в состоянии generator::STOPPED.
 * В этом состоянии может быть выполнен метод \a start, переводящий его в состояние 
 * generator::START_PENDING. Далее, если условия для генерации импульсов выполнены,
 * генератор переходит в состояние generator::RUNNING и начинает генерировать импульсы.
 * Если завершение генерации выполняется инициатором, то после вызова метода \a stop
 * генератор переходит в состояние generator::STOP_PENDING и генерация прекращается.
 * По завершении остановки генератора возвращается в состояние generator::STOPPED. 
 *    
 * Сценарий использования:
 * 1. Во время подготовки генератор получает последовательности структур типа \a Packet
 *    через метод \a addSequence, которые сохраняются в памяти. Если при добавлении
 *    возникает переполнение буфера, метод \a addSequence возвращает \a FALSE.
 * 2. Для начала генерации инициатор вызывает метод \a start, что приводит к началу
 *    генерации импульсов. Если в буфере генератора нет сохранённых структур \a Packet, 
 *    метод возвращает \a FAIL.
 * 3. Генератор генерирует заданную последовательность импульсов в соответствии
 *    с данными сохранёнными в структурах.
 * 4. Генерация импульсов завершается после генерации всех заданных импульсов,
 *    либо инициатором. Для досрочной остановки инициатор должен вызвать метод \a stop.
 * 
 * Замечания:
 * Во время генерации импульсов допускается добавлять новые последовательности 
 * вызовом метода \a addSequence. Если в момент добавления генератор находится в
 * состоянии generator::RUNNING, то добавленные структуры буду обработаны без разрывно. 
 */
class IGenerator 
{
  public:
    //! \details Метод добавляет последовательность структур типа \a Packet
    virtual generator::RESULT addSequence(std::span<Packet> sequence) = 0;
    
    //! \details Метод инициирует старт генерации импульсов
    virtual generator::RESULT start() = 0;
    
    //! \details Метод инициирует остановку генерации импульсов
    virtual generator::RESULT stop() = 0;
    
    //! \details Метод возвращает статус генератора
    virtual generator::STATUS getStatus() = 0;
    
    //! \details Метод возвращает максимальное количество структур \a Packet, 
    //! обрабатываемых генератором
    virtual int16_t getCapacity() = 0;
    
    //! \details Метод возвращает количество структур \a Packet которое 
    //! может быть добавлено.
    virtual int16_t getSpace() = 0;
};
} //namespace generator
#endif //IGENERATOR_H